library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity UserControl is
    Port (
        clk          : in  STD_LOGIC;
        time_up      : in  STD_LOGIC;
        time_dw      : in  STD_LOGIC;
        temp_up      : in  STD_LOGIC;
        temp_dw      : in  STD_LOGIC;
        mode_select  : in  STD_LOGIC;
        temp_out     : out STD_LOGIC_VECTOR (7 downto 0);
        time_out     : out STD_LOGIC_VECTOR (7 downto 0)
    );
end UserControl;

architecture Behavioral of UserControl is
    signal temp_out_pre : STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
    signal time_out_pre : STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
    signal temp_reg     : STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
    signal time_reg     : STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
    signal temp_mode    : STD_LOGIC := '0';
    signal time_mode    : STD_LOGIC := '0';
begin
    process(clk)
    begin
        if rising_edge(clk) then
            if mode_select = '1' then
                temp_mode <= '1';
                time_mode <= '0';
            else
                temp_mode <= '0';
                time_mode <= '1';
            end if;

            if temp_mode = '1' then
                if temp_up = '1' then
                    temp_out_pre <= temp_out_pre + 1;
                elsif temp_dw = '1' then
                    temp_out_pre <= temp_out_pre - 1;
                end if;
                temp_reg <= temp_out_pre;
            elsif time_mode = '1' then
                if time_up = '1' then
                    time_out_pre <= time_out_pre + 1;
                elsif time_dw = '1' then
                    time_out_pre <= time_out_pre - 1;
                end if;
                time_reg <= time_out_pre;
            end if;
        end if;
    end process;

    temp_out <= temp_reg;
    time_out <= time_reg;

end Behavioral;